import java.io.IOException;
import java.util.Scanner;

import org.apache.commons.net.ftp.Configurable;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPReply;

public abstract class BTGFTP extends FTP implements Configurable {
	public static void  main(String args[]) {
	 //Scanner loginInfo = new Scanner(System.in);
	 String ServerIP = "107.180.46.218";
		
	 String username = "benster67";
	 String password = "Corvette43";
	 
	 int port = 21;
	 
	 FTPClient ftp = new FTPClient();
	 FTPClientConfig config = new FTPClientConfig();
	 ftp.configure(config);
	 
	 boolean error = false;
	 
	 try {
		 int serverReply;
		 String FTPServer = ServerIP;
		 ftp.connect(FTPServer, port);
		 ftp.enterLocalPassiveMode();
		 ftp.login(username, password);
		 //FTPFile[] files = ftp.listFiles("/");
//	        for (FTPFile file : files) {
//	            System.out.println(file.getName());
//	        }
		 //ftp.setFileType(FTP.BINARY_FILE_TYPE); Assert.assertTrue(files.length > 0);
		 System.out.println("Connected to " + FTPServer);
		 System.out.print(ftp.getReplyString());
		 serverReply = ftp.getReplyCode();
//		 FTPFile[] dirListing = ftp.listDirectories();
//		 FTPFile[] fileListing = ftp.listFiles();
//		 System.out.println("Directories:" + dirListing);
//		 System.out.println("Files:" + fileListing);
		
		 
		 if(!FTPReply.isPositiveCompletion(serverReply)) {
			 ftp.disconnect();
			 System.err.println("The Server refused to connect.");
			 System.exit(1);
		 }
		 //Transfer Files
		 listDirectory(ftp, FTPServer, FTPServer, serverReply);
		 ftp.logout();
	 }
	 catch(IOException e) {
		 error = true;
		 e.printStackTrace();
	 }
	 finally {
		 if(ftp.isConnected()) {
			 try {
				 ftp.disconnect();
			 }
			 catch(IOException ioe) {}
		 }
		 System.exit(error ? 1 : 0);
	 }
	 
	} 
	static void listDirectory(FTPClient ftpClient, String parentDir,
	        String currentDir, int level) throws IOException {
	    String dirToList = parentDir;
	    if (!currentDir.equals("")) {
	        dirToList += "/" + currentDir;
	    }
	    FTPFile[] subFiles = ftpClient.listFiles(dirToList);
	    if (subFiles != null && subFiles.length > 0) {
	        for (FTPFile aFile : subFiles) {
	            String currentFileName = aFile.getName();
	            if (currentFileName.equals(".")
	                    || currentFileName.equals("..")) {
	                // skip parent directory and directory itself
	                continue;
	            }
	            for (int i = 0; i < level; i++) {
	                System.out.print("\t");
	            }
	            if (aFile.isDirectory()) {
	                System.out.println("[" + currentFileName + "]");
	                listDirectory(ftpClient, dirToList, currentFileName, level + 1);
	            } else {
	                System.out.println(currentFileName);
	            }
	        }
	    }
	}
}	 